[1mdiff --git a/README.md b/README.md[m
[1mdeleted file mode 100644[m
[1mindex 5829b9c..0000000[m
[1m--- a/README.md[m
[1m+++ /dev/null[m
[36m@@ -1,2 +0,0 @@[m
[31m-# Gestion-Ruche[m
[31m-Projet C[m
[1mdiff --git a/v0.1.c b/v0.1.c[m
[1mnew file mode 100644[m
[1mindex 0000000..f320ce1[m
[1m--- /dev/null[m
[1m+++ b/v0.1.c[m
[36m@@ -0,0 +1,253 @@[m
[32m+[m[32m//Modelisation d'une ruche d'abeille allant jusqu'Ã  60 000 abeilles[m
[32m+[m
[32m+[m[32m// Constantes pour la reine[m
[32m+[m[32m#define DUREE_VIE_MAX_REINE 1825 // 5 ans en jours[m
[32m+[m[32m#define PONTE_MAX_JOUR 2000 // Nombre maximal d'Å“ufs pondus par jour par la reine[m
[32m+[m
[32m+[m[32m// Constantes pour les ouvriÃ¨res et faux bourdons[m
[32m+[m[32m#define DUREE_VIE_MAX_OUVRIERE_ETE 45 // DurÃ©e de vie maximale en Ã©tÃ© en jours[m
[32m+[m[32m#define DUREE_VIE_MAX_OUVRIERE_HIVER 140 // DurÃ©e de vie maximale en hiver en jours[m
[32m+[m[32m#define DUREE_VIE_MAX_FAUX_BOURDON 90 // DurÃ©e de vie maximale en jours[m
[32m+[m
[32m+[m[32m// Constantes pour la cellule de couvain[m
[32m+[m[32m#define CAPACITE_MAX_OEUFS_CELLULE 10 // CapacitÃ© maximale d'Å“ufs par cellule de couvain[m
[32m+[m[32m#define CAPACITE_MAX_LARVES_CELLULE 10[m
[32m+[m[32m#define CAPACITE_MAX_NYMPHES_CELLULE 10[m
[32m+[m
[32m+[m[32m// Constantes pour la cellule de stockage[m
[32m+[m[32m#define CAPACITE_MAX_POLLEN_CELLULE 500 // En grammes[m
[32m+[m[32m#define CAPACITE_MAX_MIEL_CELLULE 1000 // En grammes[m
[32m+[m[32m#define CAPACITE_MAX_GELEE_ROYALE_CELLULE 100 // En grammes[m
[32m+[m[32m#define CAPACITE_MAX_EAU_CELLULE 250 // En millilitres[m
[32m+[m
[32m+[m[32m// Constantes pour les besoins de la ruche[m
[32m+[m[32m#define HUMIDITE_IDEAL 80 // Pourcentage d'humiditÃ© idÃ©ale[m
[32m+[m[32m#define TEMPERATURE_IDEAL 35 // TempÃ©rature idÃ©ale en degrÃ©s Celsius[m
[32m+[m
[32m+[m[32m// Constantes pour les statistiques de la ruche[m
[32m+[m[32m#define NOMBRE_MAX_SORTIES_JOUR 10000 // Nombre maximal de sorties d'abeilles par jour[m
[32m+[m
[32m+[m[32m// Autres constantes utiles[m
[32m+[m[32m#define NOMBRE_MAX_OUVRIERES 60000 // Nombre maximal d'ouvriÃ¨res dans la ruche[m
[32m+[m[32m#define NOMBRE_MAX_FAUX_BOURDONS 2000 // Nombre maximal de faux bourdons[m
[32m+[m
[32m+[m[32m// Ajoutez ici d'autres constantes si nÃ©cessaire[m
[32m+[m
[32m+[m
[32m+[m[32mtypedef struct Reine {[m
[32m+[m[32m    int age; // Age en jours[m
[32m+[m[32m    int dureeVieMax; // DurÃ©e de vie maximale en jours[m
[32m+[m[32m    int ponte; // Nombre d'oeufs pondus depuis la naissance[m
[32m+[m[32m    int ponteMax; // Nombre d'oeufs pondus par jour[m
[32m+[m[32m    int sante; //  Champ pour la santÃ©[m
[32m+[m[32m    int pheromones; // Niveau de phÃ©romones, affecte le comportement des ouvriÃ¨res[m
[32m+[m[32m} Reine;[m
[32m+[m
[32m+[m
[32m+[m[32mtypedef struct Ouvriere {[m
[32m+[m[32m    int age; // Age en jours[m
[32m+[m[32m    int dureeVieMax; // DurÃ©e de vie maximale en jours[m
[32m+[m[32m    int sante; // Champ pour la santÃ©[m
[32m+[m[32m    int efficacite; // Peut-Ãªtre influencÃ©e par l'expÃ©rience[m
[32m+[m[32m    int experience; // Champ pour l'expÃ©rience acquise[m
[32m+[m[32m    RoleOuvriere role;[m
[32m+[m[32m} Ouvriere;[m
[32m+[m
[32m+[m
[32m+[m[32mtypedef struct FauxBourdon {[m
[32m+[m[32m    int age; // Age en jours[m
[32m+[m[32m    int dureeVieMax; // DurÃ©e de vie maximale en jours[m
[32m+[m[32m    int enQueteReine; // Indique s'il est en quÃªte de reproduction[m
[32m+[m[32m} FauxBourdon;[m
[32m+[m
[32m+[m[32mtypedef enum RoleOuvriere {[m
[32m+[m[32m    NETTOYEUSE,[m
[32m+[m[32m    NOURRICE,[m
[32m+[m[32m    MAGASINIERE,[m
[32m+[m[32m    CIRIERE,[m
[32m+[m[32m    VENTILEUSE,[m
[32m+[m[32m    GARDIENNE,[m
[32m+[m[32m    BUTINEUSE[m
[32m+[m[32m} RoleOuvriere;[m
[32m+[m
[32m+[m[32mtypedef struct Ruche {[m
[32m+[m[32m    Reine* reine; // Pointeur vers la reine[m
[32m+[m[32m    Ouvriere* ouvrieres; // Pointer vers un tableau ou une liste chaÃ®nÃ©e[m
[32m+[m[32m    FauxBourdon* faux_bourdons; // Pointer vers un tableau ou une liste chaÃ®nÃ©e[m
[32m+[m[32m    CelluleCouvain* cellulesCouvain; // Ajout de la structure des cellules de couvain[m
[32m+[m[32m    CelluleStockage* cellulesStockage; // Ajout de la structure des cellules de stockage[m
[32m+[m[32m    BesoinsRuche besoins; // Besoins en humiditÃ© et tempÃ©rature[m
[32m+[m[32m    EntreeRuche entree; // Nombre d'abeilles entrant et sortant[m
[32m+[m[32m    SystemeVentilation ventilation; // Nombre d'abeilles ventilant la ruche[m
[32m+[m[32m    ZoneRepos repos; // Nombre d'abeilles pouvant se reposer[m
[32m+[m[32m    Statistiques stats; // Statistiques sur la ruche[m
[32m+[m
[32m+[m[32m} Ruche;[m
[32m+[m
[32m+[m[32mtypedef struct CelluleCouvain {[m
[32m+[m[32m    int oeufs; // Nombre d'Å“ufs[m
[32m+[m[32m    int larves; // Nombre de larves[m
[32m+[m[32m    int nymphes; // Nombre de nymphes[m
[32m+[m[32m    int nombreOeufsTotal; // Nombre total d'Å“ufs pondus[m
[32m+[m
[32m+[m[32m} CelluleCouvain;[m
[32m+[m
[32m+[m[32mtypedef struct CelluleStockage {[m
[32m+[m[32m    int capaciteNourritureTotal; // CapacitÃ© de stockage de la ruche[m
[32m+[m[32m    int capacitePollen; // CapacitÃ© de stockage du pollen[m
[32m+[m[32m    int capaciteMiel; // CapacitÃ© de stockage du miel[m
[32m+[m[32m    int capaciteGelÃ©eRoyale; // CapacitÃ© de stockage de la gelÃ©e royale[m
[32m+[m[32m    int capaciteEau; // CapacitÃ© de stockage de l'eau[m
[32m+[m[32m    int pollenActuel; // QuantitÃ© de pollen stockÃ©e[m
[32m+[m[32m    int mielActuel; // QuantitÃ© de miel stockÃ©e[m
[32m+[m[32m    int gelÃ©eRoyaleActuelle; // QuantitÃ© de gelÃ©e royale stockÃ©e[m
[32m+[m[32m    int eauActuel; // QuantitÃ© d'eau stockÃ©e[m
[32m+[m
[32m+[m[32m} CelluleStockage;[m
[32m+[m
[32m+[m[32mtypedef struct BesoinsRuche {[m
[32m+[m[32m    float humidite; // Pourcentage d'humiditÃ©[m
[32m+[m[32m    float temperature; // TempÃ©rature en degrÃ©s Celsius[m
[32m+[m[32m    float tauxRenouvellementAir; // Taux de renouvellement de l'air[m
[32m+[m[32m    float humiditeSeuil; // Seuil d'humiditÃ© Ã  ne pas dÃ©passer[m
[32m+[m[32m    float temperatureSeuil; // Seuil de tempÃ©rature Ã  ne pas dÃ©passer[m
[32m+[m
[32m+[m[32m} BesoinsRuche;[m
[32m+[m
[32m+[m[32mtypedef struct EntreeRuche {[m
[32m+[m[32m    int garde; // Nombre d'abeilles gardiennes[m
[32m+[m[32m    float fluxAbeilles; // Taux de sortie et d'entrÃ©e des abeilles[m
[32m+[m[32m    int nombreAbeillesSorties; // Statistiques sur les sorties des butineuses[m
[32m+[m[32m} EntreeRuche;[m
[32m+[m
[32m+[m[32mtypedef struct SystemeVentilation {[m
[32m+[m[32m    int ventilateurs; // Nombre d'abeilles ventilatrices[m
[32m+[m[32m    float efficaciteVentilation; // EfficacitÃ© de la ventilation (influence l'humiditÃ© et la tempÃ©rature)[m
[32m+[m[32m} SystemeVentilation;[m
[32m+[m
[32m+[m[32mtypedef struct ZoneRepos {[m
[32m+[m[32m    int capaciteRepos; // Nombre d'abeilles pouvant se reposer en mÃªme temps[m
[32m+[m[32m    int abeillesRepos; // Nombre d'abeilles se reposant actuellement[m
[32m+[m[32m} ZoneRepos;[m
[32m+[m
[32m+[m[32mtypedef struct Statistiques {[m
[32m+[m[32m    int nombreOeufsPondus; // Nombre total d'Å“ufs pondus[m
[32m+[m[32m    int nombreAbeillesSorties; // Nombre total d'abeilles sorties[m
[32m+[m[32m    int nombreAbeillesMortes; // Nombre total d'abeilles mortes[m
[32m+[m[32m    int nombreAbeillesNees; // Nombre total d'abeilles nÃ©es[m
[32m+[m[32m    int nombreAbeillesButineuses; // Nombre total d'abeilles butineuses[m
[32m+[m[32m    int nombreAbeillesGardiennes; // Nombre total d'abeilles gardiennes[m
[32m+[m[32m    int nombreAbeillesVentilatrices; // Nombre total d'abeilles ventilatrices[m
[32m+[m[32m    int nombreAbeillesCirieres; // Nombre total d'abeilles cirieres[m
[32m+[m[32m    int nombreAbeillesNourrices; // Nombre total d'abeilles nourrices[m
[32m+[m[32m    int nombreAbeillesNettoyeuses; // Nombre total d'abeilles nettoyeuses[m
[32m+[m[32m    int nombreAbeillesMagasiniere; // Nombre total d'abeilles magasiniere[m
[32m+[m[32m    int nombreAbeillesFauxBourdons; // Nombre total de faux bourdons[m
[32m+[m[41m    [m
[32m+[m
[32m+[m[32m    int niveauMenace; // Indicateur de menaces potentielles (prÃ©dateurs, maladies)[m
[32m+[m[32m    int niveauSanteGlobale; // SantÃ© globale de la ruche[m
[32m+[m[41m    [m
[32m+[m[32m} Statistiques;[m
[32m+[m
[32m+[m[32mvoid mettreAJourRole(Ouvriere* ouvriere) {[m
[32m+[m[32m    if (ouvriere->age >= 1 && ouvriere->age <= 3) {[m
[32m+[m[32m        ouvriere->role = NETTOYEUSE;[m
[32m+[m[32m    } else if (ouvriere->age <= 9) {[m
[32m+[m[32m        ouvriere->role = NOURRICE;[m
[32m+[m[32m    } else if (ouvriere->age <= 12) {[m
[32m+[m[32m        ouvriere->role = MAGASINIERE;[m
[32m+[m[32m    } else if (ouvriere->age <= 18) {[m
[32m+[m[32m        ouvriere->role = CIRIERE;[m
[32m+[m[32m    } else if (ouvriere->age <= 21) {[m
[32m+[m[32m        ouvriere->role = VENTILEUSE;[m
[32m+[m[32m    } else if (ouvriere->age <= 25) {[m
[32m+[m[32m        ouvriere->role = GARDIENNE;[m
[32m+[m[32m    } else {[m
[32m+[m[32m        ouvriere->role = BUTINEUSE;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m//Relatif au comportement des ouvriÃ¨res[m[41m [m
[32m+[m
[32m+[m[32mvoid effectuerTache(Ouvriere* ouvriere) {[m
[32m+[m[32m    switch (ouvriere->role) {[m
[32m+[m[32m        case NETTOYEUSE:[m
[32m+[m[32m            // Code pour le nettoyage de la ruche[m
[32m+[m[32m            // Par exemple, nettoyer les cellules, Ã©jecter les dÃ©chets, etc.[m
[32m+[m[32m            break;[m
[32m+[m[32m        case NOURRICE:[m
[32m+[m[32m            // Code pour nourrir les larves[m
[32m+[m[32m            // Par exemple, prÃ©parer la gelÃ©e royale, nourrir la reine, etc.[m
[32m+[m[32m            break;[m
[32m+[m[32m        case MAGASINIERE:[m
[32m+[m[32m            // Code pour gÃ©rer le stockage du pollen et du miel[m
[32m+[m[32m            break;[m
[32m+[m[32m        case CIRIERE:[m
[32m+[m[32m            // Code pour la construction et la rÃ©paration de la ruche[m
[32m+[m[32m            break;[m
[32m+[m[32m        case VENTILEUSE:[m
[32m+[m[32m            // Code pour la ventilation de la ruche[m
[32m+[m[32m            break;[m
[32m+[m[32m        case GARDIENNE:[m
[32m+[m[32m            // Code pour la dÃ©fense de la ruche[m
[32m+[m[32m            break;[m
[32m+[m[32m        case BUTINEUSE:[m
[32m+[m[32m            // Code pour la collecte de nectar et de pollen[m
[32m+[m[32m            break;[m
[32m+[m[32m        default:[m
[32m+[m[32m            // Comportement par dÃ©faut si nÃ©cessaire[m
[32m+[m[32m            break;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid miseAJourSanteEfficacite(Ouvriere* ouvriere) {[m
[32m+[m[32m    // Ajoutez ici la logique pour ajuster santÃ© et efficacitÃ©[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//Relatif Ã  la simulation de la ruche[m
[32m+[m
[32m+[m[32mvoid gererStockNourriture(Ruche* ruche) {[m
[32m+[m[32m    // Logique pour gÃ©rer le stock de miel et de pollen[m
[32m+[m[32m    // Peut-Ãªtre influencÃ© par les conditions environnementales et la santÃ© de la ruche[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid simulerEnvironnement(Ruche* ruche) {[m
[32m+[m[32m    // Mise Ã  jour des conditions environnementales[m
[32m+[m[32m    // Peut influencer la disponibilitÃ© des ressources, la santÃ© des abeilles, etc.[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid gererEvenements(Ruche* ruche) {[m
[32m+[m[32m    // Logique pour gÃ©rer des Ã©vÃ©nements comme des attaques de prÃ©dateurs, des maladies, etc.[m
[32m+[m[32m    // Ajuster le niveau de menace et prendre des mesures en consÃ©quence[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid evaluerSanteAbeilles(Ruche* ruche) {[m
[32m+[m[32m    // Ã‰valuer la santÃ© globale des abeilles[m
[32m+[m[32m    // Prendre des mesures pour traiter les maladies ou amÃ©liorer les conditions[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mvoid simulationJour(Ruche* ruche) {[m
[32m+[m[32m    for (int i = 0; i < nombreOuvrieres; i++) {[m
[32m+[m[32m        Ouvriere* ouvriere = &(ruche->ouvrieres[i]);[m
[32m+[m[32m        ouvriere->age++;[m
[32m+[m[32m        miseAJourSanteEfficacite(&(ruche->ouvrieres[i]));[m
[32m+[m[32m        mettreAJourRole(ouvriere);[m
[32m+[m[32m        effectuerTache(ouvriere);[m
[32m+[m[32m    }[m
[32m+[m[32m    gererStockNourriture(ruche);[m
[32m+[m[32m    simulerEnvironnement(ruche);[m
[32m+[m[32m    gererEvenements(ruche);[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mint main(){[m
[32m+[m
[32m+[m[32m}[m
\ No newline at end of file[m
